<!DOCTYPE html>
<html>

<head>
    <title>User Editor</title>
    <link rel="icon" href="/favicon.ico" type="image/x-icon">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">

    <link rel="stylesheet" href="styles.css">
</head>

<body>
    <div class="alert-box" id="confirmationBox">
        Are you sure you want to delete this user?
        <br>
        <div class="red-text">THIS IS IMMEDIATE AND PERMANANT!!!</div>
        <br>
        <button class="btn btn-red" id="yesButton">Yes</button>
        <button class="btn btn-grey" onclick="cancelDelete()">No</button>
    </div>

    <div class="alert-box" id="user-create"> 
        <form action="/users" method="POST">
            <label>Create User</label>
            <label for="username">Username:</label>
            <input type="username" id="username" name="username" required>
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" required>
            <label for="password2">Re-enter Password:</label>
            <input type="password" id="password2" name="password2" required>
            <button class="btn btn-green">Create User</button>
            <button class="btn btn-grey" onclick="cancelCreateUser()">Cancel</button>
        </form>
    </div>

    <div class="alert-box" id="uploadBox">
        <h1>File Upload</h1>
        <br>
        <div class="red-text">THIS IS IMMEDIATE AND PERMANANT!!!
            <br>THIS WILL REPLACE ALL CURRENT SETTINGS!!!
        </div>
        <br>
        <form action="/csv?data=users" method="POST" enctype="multipart/form-data">
            <input type="file" name="myFile">
            <input type="submit" class="btn btn-red" value="Upload">
        </form>
        <button class="btn btn-grey" onclick="cancelUpload()">Cancel</button>
    </div>

    <h1>Users</h1>

    <button onclick="userCreateBoxShow()">Create New User</button>
    <button onclick="downloadCSV()">Download .csv</button>
    <button onclick="uploadCSV()">Upload .csv</button>
    <button onclick="gotoAdminPanel()">Return</button>

    <br>
    <br>

    <table id="csvTable"></table>

    <script>
        let currentRow;

        function downloadCSV() {
            fetch('/csv?data=users')
                .then(response => response.text())
                .then(data => {
                    // Create a Blob from the CSV data
                    const blob = new Blob([data], { type: 'text/csv' });

                    // Create a temporary anchor element
                    const anchor = document.createElement('a');
                    anchor.href = window.URL.createObjectURL(blob);
                    anchor.download = 'data.csv';
                    anchor.click();

                    // Clean up
                    window.URL.revokeObjectURL(anchor.href);
                })
                .catch(error => {
                    console.error('Error:', error);
                    // Handle errors if necessary
                });
        }

        function gotoAdminPanel() {
            window.location.href = '/dashboard';
        }

        function loadCSV() {
            fetch('/csv?data=users')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch CSV');
                    }
                    return response.text();
                })
                .then(data => {
                    const rows = data.split('\n').map(row => row.split(','));
                    rows.pop();
                    const table = document.getElementById('csvTable');

                    // Create table header
                    const headerRow = document.createElement('tr');
                    rows[0].forEach(headerText => {
                        const th = document.createElement('th');
                        th.textContent = headerText;
                        headerRow.appendChild(th);
                    });
                    table.appendChild(headerRow);

                    // Create table rows
                    for (let i = 1; i < rows.length; i++) {
                        const tr = document.createElement('tr');

                        // Add delete button to each row
                        const deleteCell = document.createElement('td');
                        const deleteBtn = document.createElement('button');
                        deleteBtn.textContent = 'Delete';
                        deleteBtn.addEventListener('click', function (event) {
                            const rowToDelete = event.target.closest('tr');
                            const rowIndex = Array.from(rowToDelete.parentNode.children).indexOf(rowToDelete) - 1; // Adjust the index since you skipped the header row
                            showConfirmation(rowIndex);
                        });
                        deleteCell.appendChild(deleteBtn);
                        tr.appendChild(deleteCell);

                        // Populate cells with input fields and data
                        rows[i].forEach(cellData => {
                            const td = document.createElement('td');
                            const input = document.createElement('input');
                            input.value = cellData;
                            td.appendChild(input);
                            tr.appendChild(td);
                        });

                        table.appendChild(tr);
                    }
                })
                .catch(error => {
                    console.error(error);
                });
        }

        function showConfirmation(rowIndex) {
            const confirmationBox = document.getElementById('confirmationBox');
            confirmationBox.style.display = 'block';
            document.getElementById('yesButton').setAttribute('onclick', `deleteRow(${rowIndex})`);
        }

        function deleteRow(rowIndex) {
            const table = document.getElementById('csvTable');
            table.deleteRow(rowIndex + 1); // Adjust the index to account for the header row

            // Send a request to the server to delete the row from the CSV file
            fetch(`/users?index=${rowIndex + 1}`, {
                method: 'DELETE'
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to delete row');
                    }
                    console.log('Row deleted successfully');
                })
                .catch(error => {
                    console.error('Error:', error);
                    // If there's an error, you might want to handle row deletion on the frontend accordingly
                    // For example, by showing an error message or reverting the deletion on the frontend
                });
            hideConfirmation();
        }

        function hideConfirmation() {
            const confirmationBox = document.getElementById('confirmationBox');
            confirmationBox.style.display = 'none';
        }

        function cancelDelete() {
            hideConfirmation();
        }

        function hideUserCreateBox() {
            const confirmationBox = document.getElementById('user-create');
            confirmationBox.style.display = 'none';
        }

        function userCreateBoxShow() {
            const confirmationBox = document.getElementById('user-create');
            confirmationBox.style.display = 'block'
        }

        function cancelCreateUser() {
            hideUserCreateBox();
        }

        function uploadCSV() {
            const confirmationBox = document.getElementById('uploadBox');
            confirmationBox.style.display = 'block';
        }

        function cancelUpload() {
            const confirmationBox = document.getElementById('uploadBox');
            confirmationBox.style.display = 'none';
        }
        
        loadCSV();
    </script>
</body>

</html>